import os
import pefile
from contextlib import contextmanager
from joblib import delayed,Parallel

import datetime




IMAGE_SIZEOF_SECTION_HEADER = 40

@contextmanager
def open_pefile(name):
    pe = pefile.PE(name)
    try:
        yield pe
    finally:
        pe.close()

def move_sample(filename,origin_path,target_path):
    """
        将单个文件按照md5值移动到指定文件夹
    """

    move_command = "cp {}/{} {}/".format(
        origin_path,
        filename,
        target_path
        )
    code = os.system(move_command)
    return code


def zero_pe_header(origin_path,filename,out_path):
    """
        pe头抹除，首先将文件移动到指定目录，然后对新的目录下文件进行修改，不改变原有pe文件
    """
    if not os.path.exists(out_path):
        os.mkdir(out_path)
    hdr_size = 0
    move_sample(filename,origin_path,out_path)
    out_file = os.path.join(out_path,filename)

    # 计算pe文件头大小
    try:
        with open_pefile(out_file) as pe:
            hdr_size = pe.OPTIONAL_HEADER.__file_offset__ + pe.FILE_HEADER.SizeOfOptionalHeader + pe.FILE_HEADER.NumberOfSections * IMAGE_SIZEOF_SECTION_HEADER
    except Exception as e:
        pass

    # pe文件头修改
    if hdr_size:
        with open(out_file, "r+b") as fp:
            fp.seek(0)
            fp.write(b'\x00'*hdr_size)


def main():
    root_path = "/media/pwd/Elements1/dataset"
    start_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print("【{}】Start Pe Header Replace...".format(start_time))
    for i in ['train','test_A','test_B']:
        origin_path = "{}/{}/origin_data/".format(root_path,i)
        target_path = "{}/{}/pe/".format(root_path,i)
        filename_list = os.listdir(origin_path)
        tmp_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print("【{}】{}{}".format(tmp_time,origin_path,target_path))
        Parallel(n_jobs=5)(delayed(zero_pe_header)(origin_path,filename,target_path) for filename in filename_list)
    print("【{}】End Pe Header Replace!".format(start_time))
if __name__ == '__main__':
    main()