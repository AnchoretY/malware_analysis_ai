import os

import numpy as np
import torch
from torch.utils.data import Dataset


def write_pred(test_pred,test_idx,file_path):
    test_pred = [item for sublist in test_pred for item in sublist]
    with open(file_path,'w') as f:
        for idx,pred in zip(test_idx,test_pred):
            print(idx.upper()+','+str(pred),file=f)

class ExeDataset(Dataset):
    def __init__(self, filename_list, data_path, label_list, first_n_byte=2000000):
        self.filename_list = filename_list
        self.data_path = data_path
        self.label_list = label_list
        self.first_n_byte = first_n_byte

    def __len__(self):
        return len(self.filename_list)

    def __getitem__(self, idx):
        file_path = os.path.join(self.data_path,self.filename_list[idx])    
        try:
            with open(file_path,'rb') as f:
                tmp = [i+1 for i in f.read()[:self.first_n_byte]]
                tmp = tmp+[0]*(self.first_n_byte-len(tmp))
        except:
            with open(file_path.lower().strip(),'rb') as f:
                tmp = [i+1 for i in f.read()[:self.first_n_byte]]
                tmp = tmp+[0]*(self.first_n_byte-len(tmp))

        return np.array(tmp),np.array([self.label_list[idx]])
    # def __getitem__(self, idx):
    #     #file_path = os.path.join(self.data_path,self.filename_list[idx])    
    #     try:
    #         file_path = os.path.join(self.data_path,self.filename_list[idx])
    #         with open(file_path,'rb') as f:
    #             tmp = [i+1 for i in f.read()[:self.first_n_byte]]
    #             tmp = tmp+[0]*(self.first_n_byte-len(tmp))
    #     except:
    #         file_path = os.path.join("/home/yhk/data/AI_Security_2021/dataset_add/train/pe",self.filename_list[idx])
    #         if not os.path.exists(file_path):
    #             file_path = os.path.join("/home/yhk/data/AI_Security_2021/dataset_add/test/pe",self.filename_list[idx])
    #         # with open(file_path.lower().strip(),'rb') as f:
    #         with open(file_path.strip(),'rb') as f:
    #             tmp = [i+1 for i in f.read()[:self.first_n_byte]]
    #             tmp = tmp+[0]*(self.first_n_byte-len(tmp))

    #     return np.array(tmp),np.array([self.label_list[idx]])


class ExeDataset_asm(Dataset):
    def __init__(self, filename_list, data_path, label_list, first_n_byte=2000000):
        self.filename_list = filename_list
        self.data_path = data_path
        self.label_list = label_list
        self.first_n_byte = first_n_byte

    def __len__(self):
        return len(self.filename_list)

    def __getitem__(self, idx):
        file_path = os.path.join(self.data_path,self.filename_list[idx])    
        try:
            with open(file_path+".asm",'rb') as f:
                tmp = [i+1 for i in f.read()[:self.first_n_byte]]
                tmp = tmp+[0]*(self.first_n_byte-len(tmp))
        except:
            with open(file_path.lower().strip()+".asm",'rb') as f:
                tmp = [i+1 for i in f.read()[:self.first_n_byte]]
                tmp = tmp+[0]*(self.first_n_byte-len(tmp))

        return np.array(tmp),np.array([self.label_list[idx]])



    # def __getitem__(self, idx):
    #     if self.label_list[idx]==0:
    #         file_path = os.path.join(self.data_path,'white',self.filename_list[idx])
    #     else:
    #         file_path = os.path.join(self.data_path,'black',self.filename_list[idx])
            
    #     try:
    #         with open(file_path,'rb') as f:
    #             tmp = [i+1 for i in f.read()[:self.first_n_byte]]
    #             tmp = tmp+[0]*(self.first_n_byte-len(tmp))
    #     except:
    #         with open(file_path.lower().strip(),'rb') as f:
    #             tmp = [i+1 for i in f.read()[:self.first_n_byte]]
    #             tmp = tmp+[0]*(self.first_n_byte-len(tmp))

    #     return np.array(tmp),np.array([self.label_list[idx]])
